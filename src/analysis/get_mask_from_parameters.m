function get_mask_from_parameters(config, reg_params, measure_volumes)
%--------------------------------------------------------------------------
% Calculate a mask containing with structure annotations by applying a set 
% of registration parameters. Annotations will either be from ccfv3 Allen
% Atlas (default) or a custom set of annotations generated by munge_atlas.
% If annotations are already mapped to the target image, no registration
% will be applied. Structure volumes were be measured and saved to results
% summary structure. 
%--------------------------------------------------------------------------
% Usage:
% get_mask_from_parameters(config, reg_params, measure_volumes)
%
%--------------------------------------------------------------------------
% Inputs:
% config: Analysis configuration structure.
%
% reg_params: (struct) Registration parameters. 
%
% measure_volumes: (logical) Whether to measure structure volumes.
% (default: true)
%
%--------------------------------------------------------------------------

if nargin<3
    measure_volumes = true;
end

direction = config.registration_direction;
reg_dir = fullfile(config.output_directory,'registered');
mask_var = fullfile(config.output_directory, 'variables', strcat(config.sample_id,'_mask.mat')); 

% Load annotations
if isequal(config.annotation_mapping,"image")
    % Make sure the file exists
    fprintf('%s\t Loading annotations mapped to the images \n',datetime('now'))

    assert(isfile(config.annotation_file), "Annotation file %s does not exist",...
        config.annotation_file)
    assert(endsWith(config.annotation_file,'.nii'), "Annotation file must have .nii extension")
    [I_mask, meta] = read_img(config.annotation_file);
    %if ~startsWith(meta.Datatype,'uint')
    %    I_mask = imrotate(I_mask,90);
    %    I_mask = flip(I_mask,1);
    %end

elseif isequal(config.annotation_mapping,"atlas")
    fprintf('%s\t Loading annotations mapped to the atlas \n',datetime('now'))
    annotation_path = fullfile(config.home_path, 'data', 'annotation_data', config.annotation_file);
    assert(isfile(annotation_path), "Annotation file %s does not exist. See munge_atlas", annotation_path)
    av = load(annotation_path);
    I_mask = av.annotationVolume;
    I_mask = standardize_nii(I_mask, av.resolution, av.orientation, av.hemisphere, true, ...
        25, reg_params.(direction).ref_orientation, config.hemisphere);

end

% Subset structures
if ~isempty(config.use_structures)
    if isnumeric(config.use_structures)
        % Subset structures based on structure index
        id = config.use_structures;
    elseif endsWith(config.use_structures, '.csv')
        % Subset structures from csv table        
        files = dir(fullfile(config.home_path, "annotations/*/*"));
        files = cat(1, files, dir(fullfile(config.home_path, "annotations/*")));
        idx = string({files.name}) == string(config.use_structures);
        id = readmatrix(fullfile(files(idx).folder, files(idx).name));
    else
        error('Specify numeric structures indexes or .csv file in the annotations folder')
    end
    [C, ~, ic] = unique(I_mask(:));        
    C(~ismember(C,id)) = 0;        
    I_mask = reshape(C(ic),size(I_mask));
    if ~any(I_mask(:))
        error("No structures of interest present in the annotations file")
    end
    structures = "structures";
else
    structures = "all";
end

annot_marker = config.markers(config.registration_channels);
target_res = config.resample_resolution;
target_or = config.orientation;

% Apply transformation
if isequal(config.annotation_mapping,"atlas")
    fprintf('%s\t Applying transformation to annotation mask \n',datetime('now'))

    % Adjust sizes and spacing
    reg_trans = reg_params.(direction);
    size1 = reg_trans.ref_size; s = 1;
    for j = 1:length(reg_trans.TransformParameters)
        reg_trans.TransformParameters{j}.FinalBSplineInterpolationOrder = 0;
        reg_trans.TransformParameters{j}.Size = size1;
        reg_trans.TransformParameters{j}.Spacing = [s,s,s];
    end
    
    % Transform atlas
    I_mask = transformix(I_mask,reg_trans,[s,s,s], []);        
    fprintf('%s\t Annotations generated! \n',datetime('now'))

end

% Save mask as variable only if mapped to image
I_mask0 = I_mask;
if isequal(direction,"atlas_to_image") || isequal(direction,"mri_to_image") ||...
    isequal(config.annotation_mapping,"image")
    save(config.res_name,'-append','I_mask')
    save(mask_var,'I_mask','-v7.3')
    I_mask = I_mask0;
end

% Save a copy in registered directory
if isequal(config.save_registered_images,"true")
    fprintf('%s\t Saving annotation mask to registered directory \n',datetime('now'))
    annot_file = fullfile(reg_dir,sprintf('%s_MASK_%s_%d_%s.nii',...
        config.sample_id,strjoin(annot_marker,"_"),....
        target_res, structures));
    %I_mask = permute_orientation(I_mask,'ail',target_or);
    I_mask = imresize3(I_mask, 25/target_res, 'Method','nearest');
    niftiwrite(uint16(I_mask),annot_file)
end

% Measure structure volumes and save into summary structure
if measure_volumes
    fprintf('%s\t Measuring structure volumes \n',datetime('now'))
    volumes = measure_structure_volumes(config);
    save_to_summary(config.res_name,volumes,'volumes')
end

end